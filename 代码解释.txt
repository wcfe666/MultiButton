以下是两个文件中各函数的解释：

---

### **头文件 `multi_button.h` 中的函数说明：**
1. **`button_init`**  
   - **功能**：初始化按钮结构体，配置基本参数。  
   - **参数**：  
     - `handle`：按钮句柄（`struct Button` 对象）。  
     - `pin_level`：读取按钮电平的函数指针（例如读取 GPIO 的函数）。  
     - `active_level`：按钮的有效触发电平（例如 `0` 表示低电平触发）。  
     - `button_id`：按钮的唯一标识符（用于区分多个按钮）。  
   - **说明**：初始化按钮的初始状态、消抖配置、事件和回调函数数组。

2. **`button_attach`**  
   - **功能**：绑定按钮事件的回调函数。  
   - **参数**：  
     - `handle`：按钮句柄。  
     - `event`：事件类型（如 `PRESS_DOWN`、`SINGLE_CLICK`）。  
     - `cb`：事件触发时调用的回调函数。  
   - **说明**：每个事件可以绑定一个回调函数，当事件发生时自动调用。

3. **`get_button_event`**  
   - **功能**：获取当前按钮的事件。  
   - **参数**：`handle`：按钮句柄。  
   - **返回值**：当前事件的枚举值（如 `SINGLE_CLICK`）。

4. **`button_start`**  
   - **功能**：启动按钮检测，将按钮添加到处理链表中。  
   - **参数**：`handle`：按钮句柄。  
   - **返回值**：`0` 表示成功，`-1` 表示按钮已存在。

5. **`button_stop`**  
   - **功能**：停止按钮检测，从链表中移除按钮。  
   - **参数**：`handle`：按钮句柄。

6. **`button_ticks`**  
   - **功能**：按键状态机的核心驱动函数，需周期性调用（例如每 5ms 调用一次）。  
   - **说明**：遍历链表中的所有按钮，调用 `button_handler` 处理状态机逻辑。

---

### **源文件 `multi_button.c` 中的核心逻辑：**
1. **`button_handler`**  
   - **功能**：按键状态机的具体实现。  
   - **逻辑**：  
     - **消抖处理**：通过连续检测电平变化次数（`DEBOUNCE_TICKS`）消除抖动。  
     - **状态机**：  
       - **状态 0**：检测按下事件（`PRESS_DOWN`），进入状态 1。  
       - **状态 1**：检测释放（`PRESS_UP`）或长按（`LONG_PRESS_START`）。  
       - **状态 2**：判断单击、双击或重复按下（`PRESS_REPEAT`）。  
       - **状态 3**：处理快速重复按下。  
       - **状态 5**：处理长按保持（`LONG_PRESS_HOLD`）。  
   - **事件触发**：通过 `EVENT_CB` 宏调用绑定的回调函数。

---

### **关键配置参数：**
- **`TICKS_INTERVAL`**：状态机的时间基准（默认 5ms）。  
- **`DEBOUNCE_TICKS`**：消抖检测次数（默认 3 次）。  
- **`SHORT_TICKS`**：短按时间阈值（`300ms / TICKS_INTERVAL`）。  
- **`LONG_TICKS`**：长按时间阈值（`1000ms / TICKS_INTERVAL`）。  

---

### **使用流程：**
1. **初始化按钮**：  
   ```c
   struct Button btn;
   button_init(&btn, read_gpio_function, ACTIVE_LEVEL, BUTTON_ID);
   ```
2. **绑定事件回调**：  
   ```c
   button_attach(&btn, SINGLE_CLICK, single_click_callback);
   ```
3. **启动按钮检测**：  
   ```c
   button_start(&btn);
   ```
4. **周期性调用状态机**（例如在定时器中）：  
   ```c
   button_ticks();
   ```

---

### **总结：**
该库通过状态机实现了按键的消抖、单击、双击、长按等复杂事件的检测，支持多按钮管理（通过链表），开发者只需绑定回调函数即可处理事件，适用于嵌入式系统的按键驱动开发。